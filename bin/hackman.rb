#!/usr/bin/env ruby
# ----------------------------------------------------------------------------- #
#         File: hackman.rb
#  Description: curses frontend for rss feeds generated by hackercli
#       Author: j kepler  http://github.com/mare-imbrium/canis/
#         Date: 2014-08-09 - 10:12
#      License: MIT
#  Last update: 2014-09-08 19:45
# ----------------------------------------------------------------------------- #
#  hackman.rb  Copyright (C) 2012-2014 j kepler
# encoding: utf-8
require 'canis/core/util/app'
require 'canis/core/util/rcommandwindow'
require 'fileutils'
require 'pathname'
require 'open3'
require 'canis/core/include/defaultfilerenderer'
require 'canis/core/include/appmethods'

# TODO : 
#    - Make this a standard for other similar command line ncurses apps, like rigel. we can use
#      this as a template for others.
#    - make the menu a little more like the mc usermenu
#    x change location of data cache, hacker-cli to also use the same for rss file saving
#    x make color schemes into a hash 'name' => scheme, and each scheme should have named colors such as 
#       header-bg, body-bg body-fg, status etc, so it is clear. load from config file so user can change.
#    x maybe instead of diong each binding we should be ablde to pass a hash to form
#       or give it a method which it will invoke to handle keys. Form or window may have a keyhandler ??
#       TODO 
#    x create a class and put stuff in there, these methods are going into global, and can conflict
#    x put one url per lne of detail, put comments with comment url, and time with other.
#    x fix update help_text
#    x need to trap the output of hackercli in case of error.
#    x some case URL not showing in Open menu - maybe too large the window. check max size
#    x add to forum list, remove, save
#    - specify gui browser and text browser, and on commandline use same keys as corvus
#    
#    ? Use ' as bookmark etc just as in cetus and corvus, keep to same keys
#    ? multibuffers so user can backspace and do M-n etc
#    
module HackerCli
  VERSION="0.0.3"
  CONFIG_FILE="~/.hackman.yml"
  # in grey version, cannot see the other links.
  OLDCOLOR_SCHEMES=[ 
    [20,19,17, 18, :white, :green], # 0 band in header, 1 - menu bgcolor.  2 - bgcolor of main screen, 3 - status, 4 fg color body, detail color (url and comment count)
    [17,19,18, 20, :white, :green], # 0 band in header, 1 - menu bgcolor.  2 - bgcolor of main screen, 3 - status
    [236,236,0, 232,:white, :green], # 0 band in header, 1 - menu bgcolor.  2 - bgcolor of main screen, 3 - status
    [236,236,244, 250, :black, :green] # 0 band in header, 1 - menu bgcolor.  2 - bgcolor of main screen, 3 - status
  ]
  # put all methods and data into this class, so we don't pollute global space. Or get mixed into App's space.
  #
  class Hackman
    def initialize app, options
      @app = app
      @options = options
      @form = app.form
      @hash = nil
      @cache_path = "."
      @toggle_titles_only = false
      @toggle_offline = false
      @logger = @app.logger

      @fg = :white
      @_forumlist = %w{ hacker ruby programming scifi science haskell java scala cpp c_programming d_language golang vim emacs unix linux bash zsh commandline vimplugins python ars slashdot }
      @browser_mode = options[:browser_mode] || 'text'
      @browser_text = options[:browser_text] || 'elinks'
      @browser_gui = options[:browser_gui] || 'open'
      @cache_path = options[:cache_path] || "."
      config_file = options[:config_file]
      config_read config_file
      @binding ||= default_bindings
      @color_schemes ||= default_color_schemes
      # we should actually pick the fist, since the name could have changed
      @color_scheme = @color_schemes.values.first
      @forumlist ||= (options[:list] || @_forumlist)
      handle_keys @binding
      #form_bind @binding
      @cache_path = File.expand_path(@cache_path)
    end
    def config_read config_file=nil
      config_file ||= CONFIG_FILE
      config_file = File.expand_path(config_file)
      if config_file 
        if File.exists? config_file
          #eval(File.open(File.expand_path(config_file)).read)
          obj = YAML::load( File.open( config_file ) )
          #%w{ :binding :forumlist :cache_path}.each do |e|
            #if obj[e]
          obj.keys.each do |e|
              instance_variable_set("@#{e}", obj[e])
          end
        else
          alert "NOT EXISTS config file #{config_file} "
        end
      end
    end
    # save current config to a yml file, so user can modify it
    # This is included since its a bit difficult to create this file if you don't remember YML format.
    def save_config filename=nil
      unless filename
        filename = get_string "Enter filename to save configuration to:"
        return unless filename
      end
      xx = {}
      [:binding, :forumlist, :browser_gui, :browser_text, :cache_path, :color_schemes, :color_scheme].each do |e|
        xx[e] = instance_variable_get "@#{e}"
      end
      File.open(filename, 'w' ) do |f|
        f << YAML::dump(xx)
      end
      @app.message "Config saved to #{filename} in YML format"
    end
    def default_color_schemes
      @color_schemes={}
      @color_schemes['deep blue'] = { :header_bg => 20, :menu_bg => 19, :body_bg => 17, :status_bg => 18, :body_fg => :white, 
                                      :body_detail => :green }
      @color_schemes['medium blue'] = { :header_bg => 17, :menu_bg => 19, :body_bg => 18, :status_bg => 20, :body_fg => :white, 
                                        :body_detail => :green }
      @color_schemes['black body'] = { :header_bg => 236, :menu_bg => 236, :body_bg => 0, :status_bg => 232, :body_fg => :white, 
                                       :body_detail => :green }
      @color_schemes['grey body'] = { :header_bg => 236, :menu_bg => 236, :body_bg => 244, :status_bg => 250, :body_fg => :black, 
                                      :body_detail => :green }
      return @color_schemes
    end
    def articles
      @hash[:articles]
    end
    # return current color scheme
    def color_scheme
      @color_scheme
    end
    def forumlist
      @forumlist
    end
    def default_bindings
    @binding = {
      "`" => "main_menu",
      "=" => "toggle_menu",
      ">" => "next_forum",
      "<" => "prev_forum",
      "z" => "goto_article",
      "o" => "display_links",
      "<CR>" => "display_links",
      "<C-f>" => "display_links",
      "<F2>" => "choose_forum"
    }
    end


    # prompt user to select a forum, and fetch data for it.
    def choose_forum
      # scrollable filterable list
      str = display_list @forumlist, :title => "Select a forum"
      return unless str
      return if str == ""
      @current_forum = str
      forum = str
      get_data forum if forum
    end
    # add a forum at runtime, by default this will be a reddit subforum
    def add_forum forum=nil
      unless forum
        forum = get_string "Add a reddit subforum: "
        return if forum.nil? or forum == ""
      end
      @forumlist << forum
      get_data forum
    end
    def remove_forum forum=nil
      unless forum
        forum = display_list @forumlist, :title => "Select a forum"
        return if forum.nil? or forum == ""
      end
      @forumlist.delete forum
    end
    def next_forum
      index = @forumlist.index(@current_forum)
      index = index >= @forumlist.count - 1 ? 0 : index + 1
      get_data @forumlist[index]
    end
    def prev_forum
      index = @forumlist.index(@current_forum)
      index = index == 0? @forumlist.count - 1 : index - 1
      get_data @forumlist[index]
    end
    # if components have some commands, can we find a way of passing the command to them
    # method_missing gave a stack overflow.
    def execute_this(meth, *args)
      alert " #{meth} not found ! "
      $log.debug "app email got #{meth}  " if $log.debug? 
      cc = @form.get_current_field
      [cc].each do |c|  
        if c.respond_to?(meth, true)
          c.send(meth, *args)
          return true
        end
      end
      false
    end
    def open_url url, app
      #shell_out "elinks #{url}"
      shell_out "#{app} #{url}"
      #Window.refresh_all
    end

    ## 
    # Menu creator which displays a menu and executes methods based on keys.
    # In some cases, we call this and then do a case statement on either key or binding.
    # @param String title
    # @param hash of keys and methods to call
    # @return key pressed, and binding (if found, and responded). Can return NIL nil if esc pressed
    #
    def menu title, hash, config={}, &block
      raise ArgumentError, "Nil hash received by menu" unless hash
      list = []
      list << config[:subtitle] if config[:subtitle]
      config.delete(:subtitle)
      hash.each_pair { |k, v| list << " #[fg=yellow, bold] #{k} #[/end]    #[fg=green] #{v} #[/end]" }
      #  s="#[fg=green]hello there#[fg=yellow, bg=black, dim]"
      config[:title] = title
      config[:width] = hash.values.max_by(&:length).length + 13
      # need to have a proper check, which takes +left+ / column into account
      config[:width] = FFI::NCurses.COLS - 10 if config[:width] > FFI::NCurses.COLS
      ch = padpopup list, config, &block
      return unless ch
      if ch.size > 1
        # could be a string due to pressing enter
        # but what if we format into multiple columns
        ch = ch.strip[0]
      end

      binding = hash[ch]
      binding = hash[ch.to_sym] unless binding
      if binding
        if respond_to?(binding, true)
          send(binding)
        end
      end
      return ch, binding
    end
    # pops up a list, taking a single key and returning if it is in range of 33 and 126
    # Called by menu, print_help, show_marks etc
    # You may pass valid chars or ints so it only returns on pressing those.
    #
    # @param Array of lines to print which may be formatted using :tmux format
    # @return character pressed (ch.chr)
    # @return nil if escape or C-q pressed
    #
    def padpopup list, config={}, &block
      max_visible_items = config[:max_visible_items]
      row = config[:row] || 1
      col = config[:col] || 1
      # format options are :ansi :tmux :none
      fmt = config[:format] || :tmux
      config.delete :format
      relative_to = config[:relative_to]
      if relative_to
        layout = relative_to.form.window.layout
        row += layout[:top]
        col += layout[:left]
      end
      config.delete :relative_to
      # still has the formatting in the string so length is wrong.
      #longest = list.max_by(&:length)
      width = config[:width] || 60
      if config[:title]
        width = config[:title].size + 2 if width < config[:title].size
      end
      height = config[:height]
      height ||= [max_visible_items || 25, list.length+2].min 
      #layout(1+height, width+4, row, col) 
      layout = { :height => 0+height, :width => 0+width, :top => row, :left => col } 
      window = Canis::Window.new(layout)
      form = Canis::Form.new window

      ## added 2013-03-13 - 18:07 so caller can be more specific on what is to be returned
      valid_keys_int = config.delete :valid_keys_int
      valid_keys_char = config.delete :valid_keys_char

      listconfig = config[:listconfig] || {}
      #listconfig[:list] = list
      listconfig[:width] = width 
      listconfig[:height] = height 
      # pass this in config so less dependences
      listconfig[:bgcolor] = @color_scheme[:menu_bg]
      #listconfig[:selection_mode] ||= :single
      listconfig.merge!(config)
      listconfig.delete(:row); 
      listconfig.delete(:col); 
      #listconfig[:row] = 1
      #listconfig[:col] = 1
      # trying to pass populists block to listbox
      lb = Canis::TextPad.new form, listconfig, &block
      if fmt == :none
        lb.text(list)
      else
        lb.text(list, fmt)
      end
      #
      #window.bkgd(Ncurses.COLOR_PAIR($reversecolor));
      form.repaint
      Ncurses::Panel.update_panels
      if valid_keys_int.nil? && valid_keys_char.nil?
        # changed 32 to 33 so space can scroll list
        valid_keys_int = (33..126)
      end

      begin
        while((ch = window.getchar()) != 999 )

          # if a char range or array has been sent, check if the key is in it and send back
          # else just stay here
          if valid_keys_char
            if ch > 32 && ch < 127
              chr = ch.chr
              return chr if valid_keys_char.include? chr
            end
          end

          # if the user specified an array or range of ints check against that
          # therwise use the range of 33 .. 126
          return ch.chr if valid_keys_int.include? ch

          case ch
          when ?\C-q.getbyte(0)
            break
          else
            if ch == 13 || ch == 10
              s = lb.current_value.to_s # .strip #if lb.selection_mode != :multiple
              return s
            end
            # close if escape or double escape
            if ch == 27 || ch == 2727
              return nil
            end
            lb.handle_key ch
            form.repaint
          end
        end
      ensure
        window.destroy  
      end
      return nil
    end
    # main options, invokable on backtick.
    # TODO add selection of browser
    # r for reload
    # 1,2 a c view article, comments
    def main_menu
      h = { 
        :f => :choose_forum,
        :c => :color_scheme_select,
        #:s => :sort_menu, 
        #:F => :filter_menu,
        :a => :add_forum,
        :d => :remove_forum,
        :x => :extras
      }
      ch, binding = menu "Main Menu", h
      #alert "Menu got #{ch}, #{binding}" if ch
    end
    # TODO uses text browser t, use gui browser g
    # l - long list (what is currently t)
    def toggle_menu
      h = { 
        "t" => :toggle_titles_only,
        "O" => :toggle_offline
        #:x => :extras
      }
      ch, binding = menu "Main Menu", h
      #alert "Menu got #{ch}, #{binding}" if ch
    end
    def color_scheme_select ch=nil
      unless ch
        h = {}
        ctr = 0
        @color_schemes.each_pair do |k,v|
          ctr += 1
          h[ctr.to_s] = k
        end

        h = h.merge({ 
          #"0" => 'dark blue body',
          #"1" => 'medium blue body',
          #"2" => 'black body',
          #"3" => 'grey body',
          "b" => 'change body color',
          "f" => 'change body fg color',
          "d" => 'change body detail color',
          "c" => 'cycle body color'
        })
        ch, binding = menu "Color Menu", h
      end
      case ch
      when "1", "2", "0", "3","4","5","6"
        @color_scheme = @color_schemes[binding]
        @fg = @color_scheme[:body_fg]
      when "b"
        n = get_string "Enter a number for background color (0..255): "
        unless n =~ /^\d+$/
          n = Canis::ColorMap.colors.index(n.to_sym)
          return unless n
        end
        n = n.to_i
        @color_scheme[:body_bg] = n
      when "f"
        n = get_string "Enter a number for fg color (0..255) : "
        unless n =~ /^\d+$/
          n = Canis::ColorMap.colors.index(n.to_sym)
          return unless n
        end
        @fg = n.to_i
        @color_scheme[:body_fg] = n.to_i
      when "d"
        n = get_string "Enter a number for detail line color (0..255): "
        unless n =~ /^\d+$/
          n = Canis::ColorMap.colors.index(n.to_sym)
          return unless n
        end
        n = n.to_i
        @color_scheme[:body_detail] = n
      when "c"
        # increment bg color
        n = @color_scheme[:body_bg]
        n += 1
        n = 0 if n > 255
        @color_scheme[:body_bg] = n
      when "C"
        # decrement bg color
        n = @color_scheme[:body_bg]
        n -= 1
        n = 255 if n < 0
        @color_scheme[:body_bg] = n
      end

      h = @form.by_name["header"]
      tv = @form.by_name["tv"]
      sl = @form.by_name["sl"]
      tv.bgcolor = @color_scheme[:body_bg]
      #tv.color = 255
      tv.color = @fg
      sl.color = @color_scheme[:status_bg]
      h.bgcolor = @color_scheme[:header_bg]
      #@app.message "bgcolor is #{@color_scheme[:body_bg]}. :: #{@color_scheme.join(",")}, CP:#{tv.color_pair}=#{tv.color} / #{tv.bgcolor} "
      refresh
    end
    def extras
      h = { 
        "s" => :save_config
      }
      ch, binding = menu "Extras ", h
    end
    def refresh
      display_yml @current_file
    end

    def toggle_titles_only
      @toggle_titles_only = !@toggle_titles_only
      show @current_file
    end
    def toggle_offline
      @toggle_offline = !@toggle_offline
    end
    # moved from inside App
    #
    def get_item_for_line line
      index = (line - @hash[:first]) / @hash[:diff]
      @hash[:articles][index]
    end
    def title_right text
      w = @form.by_name["header"]
      w.text_right text
    end
    def title text
      w = @form.by_name["header"]
      w.text_center text
    end
    def color_line(fg,bg,attr,text)
      a = "#["
      a = []
      a << "fg=#{fg}" if fg
      a << "bg=#{bg}" if bg
      a << "#{attr}" if attr
      str = "#[" + a.join(",") + "]#{text}#[end]"
    end
    def goto_article n=$multiplier
      i = ((n-1) * @hash[:diff]) +  @hash[:first] 
      w = @form.by_name["tv"]
      w.goto_line i
    end
    def display_links
      # if multiplier is 0, use current line
      art =  self.articles[$multiplier - 1]
      if $multiplier == 0
        tv = @form.by_name["tv"]
        index = tv.current_index
        art = get_item_for_line index
      end
      show_links art
    end

    # display the given yml file. 
    # Converts the yml object to an array for textpad
    def display_yml file
      w = @form.by_name["tv"]

      obj = YAML::load( File.open( file ) )
      lines = Array.new
      url = obj[:page_url]
      host = nil
      if url.index("reddit")
        host = "reddit"
      elsif url.index("ycombinator")
        host = "hacker"
      elsif url.index("ars")
        host = "ars"
      elsif url.index("slashdot")
        host = "slashdot"
      else
        alert "Host not known: #{url} "
      end
      articles = obj[:articles]
      count = articles.count
      #lines << color_line(:red,COLOR_SCHEME[1],nil,"#{file}  #{obj[:page_url]}  |  #{count} articles | fetched  #{obj[:create_time]}")
      #lines << ("-" * lines.last.size )
      @hash = Hash.new
      @hash[:first] = lines.size
      @hash[:articles] = articles
      dc = @color_scheme[:body_detail]

      articles.each_with_index do |a, i|
        bg = i
        bg = 0 if i > 255
        line = "%3s  %s  " % [i+1 , a[:title] ]
        #lines << color_line(@fg, bg, nil, line)
        lines << line
        if !@toggle_titles_only
          line1 = []
          line2 = []
          url = a[:article_url] || a[:url]
          line1 << url
          #l = "        %s | %s" % [url, a[:comments_url] ]
          line2 << a[:comments_url] if a[:comments_url]
          #l = "#[fg=#{dc}, underline]" + l + "#[end]"
          #lines << l
          #detail = []
          if a.key? :comment_count
            #detail << a[:comment_count]
            line1 << a[:comment_count]
          end
          if a.key? :pubdate
            #detail << a[:pubdate]
            line2 << a[:pubdate]
          end
          #unless detail.empty?
            l =  "#[fg=#{dc}]" + "         " + line1.join(" | ") + "#[end]"
            lines << l
            l =  "#[fg=#{dc}]" + "         " + line2.join(" | ") + "#[end]"
            lines << l
          #end
        end
        @hash[:diff] ||= lines.size - @hash[:first]
      end
      w.text(lines, :content_type =>  :tmux)
      w.title "[ #{file} ]"

      i = @hash[:first] || 1
      w.goto_line i
      @current_file = file
      #@current_forum = file_to_forum file
      title "#{@current_forum} (#{count} articles) "
      title_right obj[:create_time]
    end
    def file_to_forum filename
      forum = File.basename(filename).sub(File.extname(filename),"").sub("__","/")
    end
    def forum_to_file forum
      file = "#{forum}.yml".sub("/","__")
      file = "#{@cache_path}/#{file}"
    end
    alias :show :display_yml
    def get_data forum
      #file = forum + ".yml"
      file = forum_to_file forum
      if File.exists? file and fresh?(file)
      else
        progress_dialog :color_pair => $reversecolor do |sw|
          sw.print "Fetching #{forum} ..."
          #system("hackercli.rb -y #{file} #{forum}")
          o,e,s = Open3.capture3("hackercli.rb -y #{file} #{forum}")
          unless s.success?
            $log.debug "  error from capture3 #{e}"
            alert e
            return
          end
        end
      end
      if File.exists? file
        @current_forum = forum
        display_yml file
      else
        alert "#{file} not created. Check externally. run hackercli.rb -y #{file} #{forum} externally"
      end
    end
    # return true if younger than one hour
    def fresh? file
      return true if @toggle_offline

      f = File.stat(file)
      now = Time.now
      return (( now - f.mtime) < 7200)
    end
    def show_links art
      return unless art
      links = {}
      keys = %w{a b c d e f}
      i = 0
      art.each_pair do |k, p|
        if p.index("http") == 0
          links[keys[i]] = p
          i += 1
        end
      end
      ch, binding = menu "Select a link", links, :subtitle => " Enter Upper case letter to open in gui"
      #alert "is #{index}: #{art[:title]} #{ch}:#{binding} "
      app = @browser_text || "elinks"
      unless binding
        return unless ch
        # it must be an upper case for GUI
        return unless ch == ch.upcase
        ch = ch.downcase
        return unless keys.include? ch
        binding = links[ch]
        app = @browser_gui || "open"
      end
      if binding
        open_url binding, app
      end
    end
    # since this does not happen inside form's loop, therefore form is unable to repaint, repaint
    # happens only after a keystroke
    # This allows us to pass in a hash with string names for methods. This hash can be easily updated,
    # or even read in from a config file/yml file. It is assumed here that all the string names
    # correspond to names of methods withing this class, so no class references are required.
    # TODO split the command if there are spaces.
    def handle_keys hash
      @app.keypress do |str|
        binding = hash[str]
        if binding
          binding = binding.to_sym
          if respond_to?(binding, true)
            send(binding)
          else
            #alert "unresponded to #{str}"
          end
        end
      end
    end

    # Should work on this as a means of binding each element of a hash into forms keymap.
    # FIXME works except that multiplier not working ??
    def form_bind hash
      hash.each_pair do |k, v|
        nk = key_to_i(k)
        desc = "??"
        desc = v if v.is_a? String or v.is_a? Symbol
        @form.bind_key(nk, desc) { self.send(v) }
      end
    end
    # convert a key in the format to an int so it can be mapped using bind_key
    # "[a-zA-Z"] etc a single cahr
    # C-a to C-z
    # M-a to M-z
    # F1 .. F10
    # This does not take complex cases yet. It is a simplistic conversion.
    def key_to_i k
      if k.size == 1
        return k.getbyte(0)
      end
      if k =~ /^<M-/
        ch = k[3]
        return 128 + ch.ord
      elsif k == "<CR>"
        return 13
      elsif k =~ /^<[Cc]/
        ch = k[3]
        x = ch.ord - "a".ord + 1
      elsif k[0,2] == "<F"
        ch = k[2..-2]
        return 264 + ch.to_i
      else
        alert "not able to bind #{k}"
      end

    end
  end # class
end # module HackerCli
include HackerCli

# http://www.ruby-doc.org/stdlib/libdoc/optparse/rdoc/classes/OptionParser.html
require 'optparse'
options = {}
app = File.basename $0
OptionParser.new do |opts|
  opts.banner = %Q{
#{app} version #{VERSION} (YML version)
Usage: #{app} [options]
}

  #opts.on("-m MODE", String,"--mode", "Use 'text' or 'gui' browser") do |v|
    #options[:browser_mode] = v
  #end
  opts.on("-t browser", String,"--text", "browser for text mode, default elinks") do |v|
    options[:browser_text] = v
  end
  opts.on("-g browser", String,"--gui", "browser for gui mode, default open") do |v|
    options[:browser_gui] = v
  end
  opts.on("-c cache dir", String,"--cache-dir", "location to store yml files, default .") do |v|
    options[:cache_path] = File.expand_path(v)
  end
  opts.on("-u config_file", String,"--config-file", "path to load config info from") do |v|
    options[:config_file] = v
  end
  opts.on("--list x,y,z", Array, "Example 'list' of forums: hacker,ruby,programming...") do |list|
    options[:list] = list
  end
  # file age in hours
  # offline mode
  # config file path
end.parse!
App.new do 
  def logger; return @log; end
  @log = create_logger "hacker.log"
  @h = Hackman.new self, options
  @color_scheme = @h.color_scheme
  @header = app_header "hackman #{VERSION}", :text_center => "RSS Reader", :name => "header",
    :text_right =>"Menu `", :color => :white, :bgcolor => @color_scheme[:header_bg]
  message "Press F10 (or qq) to exit, F1 Help, ` for Menu  "



    
    # commands that can be mapped to or executed using M-x
    # however, commands of components aren't yet accessible.
    def get_commands
      %w{ choose_forum next_forum prev_forum }
    end
    # help text for F1, but this needs to be kept consistent with @bindings,
    # if that is changed, then how does this show the change, considering that
    # the config file will be read in Hackman, not here.
    def help_text
      <<-eos
               Hackman Help

      F2       -   forum selection (interface like Ctrl-P, very minimal)
      F1       -   Help
      F10      -   Quit application
      qq       -   Quit application

      ` (backtick) - Main Menu (add, remove, change forum)
      = (Equal)    - Toggle Menu (titles only)

      o        - open url menu for current article (under cursor)
      <n>o     - open url menu for <n>th article
      <n>z     - goto <n>th article

      "<"      - previous forum in list
      ">"      - next forum in list

      "/"      - search within the page (case-sensitive). Append "/i" to ignore case.

      -----------------------------------------------------------------------
      :n or Alt-n for general help.
      eos
    end

    #install_help_text help_text

    def app_menu
      # TODO update and fix this
      require 'canis/core/util/promptmenu'
      menu = PromptMenu.new self do
        item :f, :choose_forum
        item :n, :next_forum
        item :p, :prev_forum
        item :a, :add_forum
        item :d, :remove_forum
      end
      menu.display_new :title => "Menu"
    end
    # BINDING SECTION
    if false
  #@form.bind_key(?:, "App Menu") { app_menu; }
  @form.bind_key(?`, "Main Menu") { @h.main_menu; }
  @form.bind_key(FFI::NCurses::KEY_F2, "Main Menu") { @h.choose_forum; }
  @form.bind_key(FFI::NCurses::KEY_F3, "Cycle bgcolor") { @h.color_scheme_select "c"; }
  @form.bind_key(FFI::NCurses::KEY_F4, "Cycle bgcolor") { @h.color_scheme_select "C"; }
  @form.bind_key($kh_int["S-F3"], "Cycle bgcolor") { @h.color_scheme_select "C"; }
  @form.bind_key(?=, "Toggle Menu") { 
    @h.toggle_menu; 
  }
  @form.bind_key(?<, "Previous Forum") { @h.prev_forum; }
  @form.bind_key(?>, "Next Forum") { @h.next_forum; }
    end

    @form.help_manager.help_text = help_text

  begin
  stack :margin_top => 1, :margin_left => 0, :width => :expand , :height => FFI::NCurses.LINES-2 do
    tv = textpad :height_pc => 100, :width_pc => 100, :name => "tv", :suppress_borders => true,
      :bgcolor => @color_scheme[:body_bg], :color => 255, :attr => NORMAL
    #tv.renderer ruby_renderer
    #tv.bind(:PRESS) {|ev| display_links }
    tv.text_patterns[:articles] = Regexp.new(/^ *\d+ /)
    tv.bind_key(KEY_TAB, "goto article") { tv.next_regex(:articles) }
  end # stack
    
  sl = status_line :row => Ncurses.LINES-1, :bgcolor => :yellow, :color => @color_scheme[:status_bg]
  @h.choose_forum 
  rescue => ex
    textdialog ["Error in hackman: #{ex} ", *ex.backtrace], :title => "Exception"
    $log.debug( ex) if ex
    $log.debug(ex.backtrace.join("\n")) if ex
  ensure
    p ex if ex
    p(ex.backtrace.join("\n")) if ex
  end
end # app
